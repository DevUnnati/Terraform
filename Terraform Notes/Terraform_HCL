What is HCL ?
HCL stands for Hashicrop configuration Language.It used to write configuration in Terraform.

Terraform configuration is written in the HashiCorp Configuration Language (HCL), which is a declarative language specifically designed for Terraform. 
The syntax of HCL is human-readable, making it easy for users to understand the configuration of infrastructure resources

Terraform_Configuration Files:-
Terraform configuration files are written in the Terraform language and are used to define and manage the infrastructure you want to create, update, or 
manage. In Terraform extensions is ".tf" .

ex:- local. tf   ---> file
content:--
<block> <parameter>
{
  key1 = value1
  key2 = value2
}

Note:- The Terraform syntax build around two key syntax constructs.
       a) arguments
      b) blocks

Terraform Blocks:-
Terraform Configuration Blocks are the building blocks of Terraform configurations. They define the infrastructure components and how they should be 
connected and configured. The Terraform language provides several types of blocks, such as provider, resource, module, and data, to describe the
components you want to create and manage.

Terraform Variables:-
Terraform variables provide a way to store values that can be reused throughout a Terraform configuration. There are two types of Terraform variables: input variables and output variables.

Terraform Input Varaibles:-
Input variables are used as parameters when you apply your Terraform configuration. They allow you to pass values into your Terraform code that can be used to dynamically control the creation of your infrastructure.

ex-
variable "location" {
  type        = string
  description = "The Azure region where the resource group will be created."
}

provider "azurerm" {
  version = "2.0"
}

resource "azurerm_resource_group" "b59_group" {
  name     = "b59-group"
  location = var.location
}

Terraform Output Variables:-
Output variables are used to return values from your Terraform code back to the command line interface. They can be used to pass data between Terraform modules or to return information about your infrastructure for use in other tools and scripts.

example:-
provider "azurerm" {
  version = "2.0"
}

resource "azurerm_resource_group" "b59_group" {
  name     = "b59-group"
  location = "eastus"
}

output "resource_group_name" {
  value = azurerm_resource_group.b59_group.name
}

Terraform Data Types:--
In Terraform, data types are used to specify the format of the values assigned to variables. 

Used to represent text-based values. For example: "Hello World"
number
Used to represent numerical values, either integer or floating-point. For example: 42 or 3.14
boolean
Used to represent true/false values. For example: true or false
list
Used to represent a list of values of any data type. For example: [1, 2, 3, 4]
map
Used to represent a collection of key-value pairs, where the keys and values can be of any data type. For example: {key1 = "value1", key2 = "value2"}
object
Used to represent a complex data structure, typically containing multiple keys and values of different data types.

When defining variables in Terraform, you can specify the data type either explicitly or let Terraform infer the type based on the value assigned to the variable. For example, the following code defines a variable message of type string and assigns it a value of Hello World:

Terraform Provider Syntax:-
Terraform Provider are external services that provide Terraform with the necessary functionality to manage and intreact with specific resources.

example:-
provider "azurerm"{
  version = "2.27.0"
  features {}
}

Once the provider is defined, you can use it to manage resources in Microsoft Azure, such as creating a virtual network, creating a virtual machine, or creating a storage account. 

Terraform Provisioner:- 
Terraform Provisioners are scripts that are executed after a resource is created and before it is destroyed.
They allow you configure additional actions to be taken on your infrastructure after Terraform has created it.


Note:- 
Itâ€™s important to note that provisioners are optional, but they provide a powerful way to configure additional actions on your infrastructure after Terraform has created it.

Supported Provisioners:-
a) local-exec Provisioner:-
local-exec provisioner is a type of Terraform provisioner that runs a local executable after Terraform has completed its work. This provisioner can be useful in situations where some additional post-processing of the Terraform-created resources is required. For example, you might use a local-exec provisioner to install software on a virtual machine after Terraform has finished creating the virtual machine and its associated resources.
syntax:-
provisioner "local-exec" {
  command = "command to run"

  environment = {
    VAR1 = "value1"
    VAR2 = "value2"
  }
}

example1:-
resource "azurerm_virtual_machine" "b59_vm" {
  # ... (other configuration omitted)

  provisioner "local-exec" {
    command = "apt-get update && apt-get install -y apache2"
  }
}

example2:-
resource "azurerm_virtual_machine" "b59_vm" {
  # resource configuration here

  provisioner "local-exec" {
    when = "destroy"
    command = "echo 'Virtual machine has been destroyed!'"
  }
}
In this example, when the Terraform-managed Azure virtual machine is destroyed, the local-exec provisioner will execute the echo command and log the message to the console.

remote-exec Provisioner:-
The remote-exec provisioner in Terraform allows executing a command on a remote resource after it has been created. It is commonly used to perform post-provisioning steps on instances created by Terraform.





