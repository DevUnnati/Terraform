provider "null" {
  # Define a dummy provider to satisfy Terraform's requirement for a provider block.
}

resource "null_resource" "get_argocd_cm" {
  provisioner "local-exec" {
    command = "kubectl get configmap argocd-cm -n argocd -o yaml > argocd-cm.yml"
  }
}

locals {
  argocd_cm_content = <<-EOT
apiVersion: v1
data:
  admin.enabled: "true"
  application.instanceLabelKey: argocd.argoproj.io/instance
  exec.enabled: "false"
  server.rbac.log.enforce.enable: "false"
  timeout.hard.reconciliation: 0s
  timeout.reconciliation: 180s
  accounts.argocd_unnati: apiKey, login
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: argocd
    meta.helm.sh/release-namespace: argocd
  creationTimestamp: "2023-07-20T12:49:16Z"
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-5.27.1
  name: argocd-cm
  namespace: argocd
  resourceVersion: "51738"
  uid: 5d8bbad6-9815-403d-8b19-ed891261dc59
EOT
}

resource "null_resource" "update_argocd_cm" {
  depends_on = [null_resource.get_argocd_cm]

  provisioner "local-exec" {
    command = "echo '${local.argocd_cm_content}' > argocd-cm.yml"
  }
}

resource "null_resource" "apply_argocd_cm" {
  depends_on = [null_resource.update_argocd_cm]

  provisioner "local-exec" {
    command = "kubectl replace -f argocd-cm.yml --force"
  }
}
