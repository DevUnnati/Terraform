provider "null" {
  # Define a dummy provider to satisfy Terraform's requirement for a provider block.
}

resource "null_resource" "get_argocd_cm" {
  provisioner "local-exec" {
    command = "kubectl get configmap argocd-cm -n argocd -o yaml > argocd-cm.yml"
  }
}

locals {
  argocd_cm_content = <<-EOT
apiVersion: v1
data:
  admin.enabled: "true"
  application.instanceLabelKey: argocd.argoproj.io/instance
  exec.enabled: "false"
  server.rbac.log.enforce.enable: "false"
  timeout.hard.reconciliation: 0s
  timeout.reconciliation: 180s
  accounts.argocd_unnati: apiKey, login
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: argocd
    meta.helm.sh/release-namespace: argocd
  creationTimestamp: "2023-07-20T12:49:16Z"
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-5.27.1
  name: argocd-cm
  namespace: argocd
  resourceVersion: "51738"
  uid: 5d8bbad6-9815-403d-8b19-ed891261dc59
EOT
}

resource "null_resource" "update_argocd_cm" {
  depends_on = [null_resource.get_argocd_cm]

  provisioner "local-exec" {
    command = "echo '${local.argocd_cm_content}' > argocd-cm.yml"
  }
}

resource "null_resource" "apply_argocd_cm" {
  depends_on = [null_resource.update_argocd_cm]

  provisioner "local-exec" {
    command = "kubectl replace -f argocd-cm.yml --force"
  }
}




----------------------------------------------------- Create user with password ---------------------------------------------------------------------------



provider "null" {
  # Define a dummy provider to satisfy Terraform's requirement for a provider block.
}


variable "argocd_cli_url" {
  default = "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
}

resource "null_resource" "install_argocd_cli" {
  # Use a null_resource to run local_exec provisioner
  provisioner "local-exec" {
    command = "wget ${var.argocd_cli_url} -O argocd-linux-amd64"
  }

  provisioner "local-exec" {
    command = "chmod +x argocd-linux-amd64"
  }

  provisioner "local-exec" {
    command = "sudo mv argocd-linux-amd64 /usr/local/bin/argocd"
  }
}


resource "null_resource" "get_argocd_cm" {
  provisioner "local-exec" {
    command = "kubectl get configmap argocd-cm -n argocd -o yaml > argocd-cm.yml"
  }
}

locals {
  argocd_cm_content = <<-EOT
apiVersion: v1
data:
  admin.enabled: "true"
  application.instanceLabelKey: argocd.argoproj.io/instance
  exec.enabled: "false"
  server.rbac.log.enforce.enable: "false"
  timeout.hard.reconciliation: 0s
  timeout.reconciliation: 180s
  accounts.argocd_unnati: apiKey, login
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: argocd
    meta.helm.sh/release-namespace: argocd
  creationTimestamp: "2023-07-20T12:49:16Z"
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
    helm.sh/chart: argo-cd-5.27.1
  name: argocd-cm
  namespace: argocd
  resourceVersion: "51738"
  uid: 5d8bbad6-9815-403d-8b19-ed891261dc59
EOT
}

resource "null_resource" "update_argocd_cm" {
  depends_on = [null_resource.get_argocd_cm]

  provisioner "local-exec" {
    command = "echo '${local.argocd_cm_content}' > argocd-cm.yml"
  }
}

resource "null_resource" "apply_argocd_cm" {
  depends_on = [null_resource.update_argocd_cm]

  provisioner "local-exec" {
    command = "kubectl replace -f argocd-cm.yml --force"
  }
}


resource "null_resource" "get_argocd_password" {
  # Use a null_resource to run local-exec provisioner
  provisioner "local-exec" {
    command = <<-EOT
      # Fetch the ArgoCD password from Kubernetes secret
      argocd_password=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

      # Create a temporary ArgoCD config YAML with LoadBalancer
      kubectl -n argocd get svc argocd-server -o yaml | sed -e "s/type: ClusterIP/type: LoadBalancer/" > argocd_lb.yaml


      # Apply the modified ArgoCD config and get the LoadBalancer IP
      kubectl apply -f argocd_lb.yaml
      lb_ip=$(kubectl -n argocd get svc argocd-server -o jsonpath="{.status.loadBalancer.ingress[0].ip}")

      # Perform argocd login using the retrieved password and LoadBalancer IP
      argocd login  --insecure --username=admin --password=$argocd_password $lb_ip

      # Provide account list
      argocd account list

      # Update password of User
       argocd account update-password --account argocd_unnati --new-password hanli_unnati --current-password $argocd_password

    EOT
    interpreter = ["bash", "-c"]
  }
}
